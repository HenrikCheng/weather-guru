{"version":3,"sources":["components/WeatherEmoji.js","components/Weathercard.js","components/Loader.js","components/Positioncard.js","images/panda.png","App.js","reportWebVitals.js","index.js"],"names":["WeatherEmoji","props","_jsx","src","concat","weatherDescription","icon","alt","Weathercard","data","isLoadingWeatherdata","isCurrent","FeelsLikeSection","_jsxs","className","children","feels_like","map","time","charAt","toUpperCase","slice","_Fragment","style","lineHeight","weather","humidity","Date","sunrise","toLocaleTimeString","sunset","Loader","PositionCard","lon","lat","onClickHandler","timezone","Math","round","App","_useState","useState","_useState2","_slicedToArray","setLat","_useState3","_useState4","setLon","_useState5","_useState6","setData","_useState7","_useState8","isLoadingGPS","setisLoadingGPS","_useState9","_useState10","setIsLoadingWeatherdata","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getWeather","isCacheValid","timestamp","getTime","parseInt","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cachedData","_JSON$parse","cachedResult","response","result","cacheData","wrap","_context","prev","next","localStorage","getItem","JSON","parse","abrupt","fetch","process","sent","json","setItem","stringify","t0","console","error","stop","_x","_x2","apply","arguments","PandaLogo","width","height","WeatherCard","current","daily","length","day","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cc18997.chunk.js","sourcesContent":["import \"./styles.css\";\n\nconst WeatherEmoji = (props) => (\n  <img\n    src={`http://openweathermap.org/img/w/${props.weatherDescription.icon}.png`}\n    alt=\"weather icon\"\n  />\n);\n\nexport default WeatherEmoji;\n","import \"./styles.css\";\nimport WeatherEmoji from \"./WeatherEmoji\";\n\nconst Weathercard = (props) => {\n  const { data, isLoadingWeatherdata, isCurrent } = props;\n\n  const TemperatureSection = () => {\n    if (isCurrent) {\n      return (\n        <p>\n          {data.temp} Â°C. {data.weather[0].description}.\n        </p>\n      );\n    } else if (typeof data.temp === \"object\") {\n      return (\n        <>\n          <h5>ðŸŒ¡ Temperature</h5>\n          {Object.entries(data.temp).map(([time, temp]) => (\n            <p key={time}>\n              Time: {time}, Temperature: {temp} Â°C\n            </p>\n          ))}\n        </>\n      );\n    }\n  };\n\n  const FeelsLikeSection = () => {\n    if (isCurrent) {\n      return (\n        <p className=\"card-text\">ðŸ˜Œ Feels like: {data.feels_like + \" Â°C\"}</p>\n      );\n    } else if (typeof data.feels_like === \"object\") {\n      const orderedKeys = [\"morn\", \"day\", \"eve\", \"night\"];\n      return (\n        <div>\n          <h5>ðŸ˜Œ Feels like</h5>\n          {orderedKeys.map((time) => (\n            <p key={time}>\n              Time: {time.charAt(0).toUpperCase() + time.slice(1)}, Temperature:{\" \"}\n              {data.feels_like[time]} Â°C\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return <></>;\n  };\n\n  if (isLoadingWeatherdata) {\n    return <></>;\n  }\n\n  if (!data) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"card\" style={{ lineHeight: \"75%\" }}>\n      <div className=\"card-body pt-1\">\n        <h5 className=\"card-title d-flex align-items-center justify-content-between mb-0\">\n          {isCurrent && <span>Right now</span>}\n          <WeatherEmoji weatherDescription={data.weather[0]} />\n        </h5>\n        {/* <div className=\"card-title\">\n          <TemperatureSection />\n        </div> */}\n        <div className=\"card-text\">\n          <FeelsLikeSection />\n        </div>\n        <p className=\"card-text\">ðŸŒŠ Humidity: {data.humidity + \" %\"}</p>\n        <p className=\"card-text\">\n          ðŸŒ… Sunrise: {new Date(data.sunrise * 1000).toLocaleTimeString()}\n        </p>\n        <p className=\"card-text\">\n          ðŸŒ‡ Sunset: {new Date(data.sunset * 1000).toLocaleTimeString()}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Weathercard;\n","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loaderContainer\">\n      <span>Getting your data</span>\n      <div className=\"spinner\">\n        <div className=\"bounce1\"></div>\n        <div className=\"bounce2\"></div>\n        <div className=\"bounce3\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import \"./styles.css\";\nimport Loader from \"./Loader\";\n\nconst PositionCard = (props) => {\n  const { lon, lat, data, onClickHandler } = props;\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{data.timezone}</h5>\n          {lon && lat ? (\n            <>\n              <div>Latitude: {Math.round(lat * 1000) / 1000}</div>\n              <div>Longitude: {Math.round(lon * 1000) / 1000}</div>\n            </>\n          ) : (\n            <Loader />\n            // <></>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PositionCard;\n","export default __webpack_public_path__ + \"static/media/panda.d59f7d49.png\";","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport WeatherCard from \"./components/Weathercard\";\nimport PositionCard from \"./components/Positioncard\";\nimport PandaLogo from \"./images/panda.png\";\n\nfunction App() {\n  const [lat, setLat] = useState();\n  const [lon, setLon] = useState();\n  const [data, setData] = useState([]);\n  const [isLoadingGPS, setisLoadingGPS] = useState(true);\n  const [isLoadingWeatherdata, setIsLoadingWeatherdata] = useState(true);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLon(position.coords.longitude);\n    });\n    setisLoadingGPS(false);\n  }, []);\n\n  useEffect(() => {\n    if (isLoadingGPS === false) {\n      getWeather(lat, lon);\n    }\n  }, [lon]);\n\n  const isCacheValid = (timestamp) => {\n    const currentTime = new Date().getTime();\n    const cacheTime = parseInt(timestamp, 10);\n    return currentTime - cacheTime < 3600000; // 1 hour in milliseconds\n  };\n\n  const getWeather = async (lat, lon) => {\n    const cachedData = localStorage.getItem(\"weatherData\");\n\n    if (cachedData) {\n      const { timestamp, data: cachedResult } = JSON.parse(cachedData);\n      if (isCacheValid(timestamp)) {\n        setData(cachedResult);\n        setIsLoadingWeatherdata(false);\n        return;\n      }\n    }\n\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely,hourly&appid=${process.env.REACT_APP_API_KEY}`\n      );\n      const result = await response.json();\n      setData(result);\n\n      // Update the cache with the new data and timestamp\n      const cacheData = {\n        timestamp: new Date().getTime(),\n        data: result,\n      };\n      localStorage.setItem(\"weatherData\", JSON.stringify(cacheData));\n\n      setIsLoadingWeatherdata(false);\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      setIsLoadingWeatherdata(false);\n    }\n  };\n\n  const onClickHandler = () => getWeather(lat, lon);\n\n  return (\n    <div className=\"App bg-secondary\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <img\n          src={PandaLogo}\n          width=\"30\"\n          height=\"30\"\n          alt=\"\"\n          className=\"pandaLogo\"\n        />\n        <span className=\"m-3 text-light\">WeatherPanda</span>\n      </nav>\n      <div className=\"cardContainer\">\n        <PositionCard\n          lat={lat}\n          lon={lon}\n          data={data}\n          isLoadingGPS={isLoadingGPS}\n          onClickHandler={onClickHandler}\n        />\n        <WeatherCard\n          data={data.current}\n          isLoadingWeatherdata={isLoadingWeatherdata}\n          isCurrent={true}\n        />\n        {data &&\n          data.daily &&\n          data.daily.length > 0 &&\n          data.daily.map((day, index) => {\n            return (\n              <WeatherCard\n                data={day}\n                isLoadingWeatherdata={isLoadingWeatherdata}\n                isCurrent={false}\n                key={index}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}