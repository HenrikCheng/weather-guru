{"version":3,"sources":["components/WeatherEmoji.js","hooks/useWeekday.js","components/Weathercard.js","components/Loader.js","hooks/useTime.js","components/Positioncard.js","images/panda.png","App.js","reportWebVitals.js","index.js"],"names":["WeatherEmoji","props","_jsx","src","concat","weatherDescription","icon","alt","useWeekday","initialDate","offset","arguments","length","undefined","_useState","useState","_useState2","_slicedToArray","weekday","setWeekday","useEffect","dayIndex","getDay","Weathercard","data","isLoadingWeatherdata","isCurrent","index","today","Date","todayWeekday","FeelsLikeSection","_jsxs","className","children","feels_like","map","time","charAt","toUpperCase","slice","_Fragment","HeaderSection","style","lineHeight","weather","paddingTop","humidity","sunrise","toLocaleTimeString","sunset","Loader","useTime","currentTime","setCurrentTime","interval","setInterval","clearInterval","PositionCard","lon","lat","timezone","Math","round","App","setLat","_useState3","_useState4","setLon","_useState5","_useState6","setData","_useState7","_useState8","isLoadingGPS","setisLoadingGPS","_useState9","_useState10","setIsLoadingWeatherdata","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getWeather","isCacheValid","timestamp","getTime","parseInt","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cachedData","_JSON$parse","cachedResult","response","result","cacheData","wrap","_context","prev","next","localStorage","getItem","JSON","parse","console","log","abrupt","fetch","process","sent","json","setItem","stringify","t0","error","stop","_x","_x2","apply","PandaLogo","width","height","onClickHandler","WeatherCard","current","daily","day","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"yPASeA,EAPM,SAACC,GAAK,OACzBC,cAAA,OACEC,IAAG,mCAAAC,OAAqCH,EAAMI,mBAAmBC,KAAI,QACrEC,IAAI,gBACJ,ECiBWC,EArBI,SAACC,GAA6B,IAAhBC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACxCG,EAA8BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAiB1B,OAfAI,qBAAU,WACR,IASMC,GAAYZ,EAAYa,SAAWZ,GAAU,EAEnDS,EAXmB,CACjB,SACA,SACA,UACA,YACA,WACA,SACA,YAIoBE,GACxB,GAAG,CAACZ,EAAaC,IAEVQ,CACT,ECgDeK,EAjEK,SAACtB,GACnB,IAAQuB,EAAiDvB,EAAjDuB,KAAMC,EAA2CxB,EAA3CwB,qBAAsBC,EAAqBzB,EAArByB,UAAWC,EAAU1B,EAAV0B,MAEzCC,EAAQ,IAAIC,KAEZC,EAAetB,EAAWoB,EADjBD,GAGTI,EAAmB,WACvB,GAAIL,EACF,OACEM,eAAA,KAAGC,UAAU,YAAWC,SAAA,CAAC,4BAAgBV,EAAKW,WAAa,YAExD,GAA+B,kBAApBX,EAAKW,WAAyB,CAE9C,OACEH,eAAA,OAAAE,SAAA,CACEhC,cAAA,MAAAgC,SAAI,4BAHY,CAAC,OAAQ,MAAO,MAAO,SAI1BE,KAAI,SAACC,GAAI,OACpBnC,cAAA,KAAc+B,UAAU,YAAWC,SAAA,GAAA9B,OAC7BiC,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAE,iCAAApC,OAC9CoB,EAAKW,WAAWE,GAAK,WAFjBA,EAGJ,MAIZ,CACA,OAAOnC,cAAAuC,WAAA,GACT,EAEMC,EAAgB,WACpB,OAAIhB,EACKxB,cAAA,QAAAgC,SAAM,cAEXP,EACKzB,cAAA,QAAAgC,SAAOJ,IAET5B,cAAA,QAAAgC,SAAM,SACf,EAEA,OAAIV,IAASC,EAETvB,cAAA,OAAK+B,UAAU,OAAOU,MAAO,CAAEC,WAAY,OAAQV,SACjDF,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC7BF,eAAA,MAAIC,UAAU,oEAAmEC,SAAA,CAC/EhC,cAACwC,EAAa,IACdxC,cAACF,EAAY,CAACK,mBAAoBmB,EAAKqB,QAAQ,QAEjD3C,cAAC6B,EAAgB,IACjBC,eAAA,KAAGC,UAAU,YAAYU,MAAO,CAAEG,WAAY,QAASZ,SAAA,CAAC,0BACxCV,EAAKuB,SAAW,QAEhCf,eAAA,KAAGC,UAAU,YAAWC,SAAA,CAAC,yBACV,IAAIL,KAAoB,IAAfL,EAAKwB,SAAgBC,wBAE7CjB,eAAA,KAAGC,UAAU,YAAWC,SAAA,CAAC,wBACX,IAAIL,KAAmB,IAAdL,EAAK0B,QAAeD,6BAO5C,IACT,ECpDeE,EAbA,WACb,OACEnB,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BhC,cAAA,QAAAgC,SAAM,sBACNF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBhC,cAAA,OAAK+B,UAAU,YACf/B,cAAA,OAAK+B,UAAU,YACf/B,cAAA,OAAK+B,UAAU,iBAIvB,ECGemB,EAdC,WACd,IAAAtC,EAAsCC,mBAAS,IAAIc,MAAOb,EAAAC,YAAAH,EAAA,GAAnDuC,EAAWrC,EAAA,GAAEsC,EAActC,EAAA,GAUlC,OARAI,qBAAU,WACR,IAAMmC,EAAWC,aAAY,WAC3BF,EAAe,IAAIzB,KACrB,GAAG,KAEH,OAAO,kBAAM4B,cAAcF,EAAU,CACvC,GAAG,IAEIF,EAAYJ,oBACrB,ECuBeS,EAhCM,SAACzD,GACpB,IAAQ0D,EAAmB1D,EAAnB0D,IAAKC,EAAc3D,EAAd2D,IAAKpC,EAASvB,EAATuB,KAEZI,EAAQ,IAAIC,KACZC,EAAetB,EAAWoB,GAC1ByB,EAAcD,IAEpB,OACElD,cAAAuC,WAAA,CAAAP,SACEhC,cAAA,OAAK+B,UAAU,OAAMC,SACnBF,eAAA,OAAKC,UAAU,YAAWC,SAAA,CACxBhC,cAAA,MAAI+B,UAAU,aAAYC,SAAEV,EAAKqC,WAChCF,GAAOC,EACN5B,eAAA,OAAAE,SAAA,CACEF,eAAA,KAAGC,UAAU,YAAWC,SAAA,CAAC,SAAOmB,KAChCrB,eAAA,KAAGC,UAAU,YAAWC,SAAA,CAAC,YAAUJ,KACnCE,eAAA,KAAGC,UAAU,YAAWC,SAAA,CAAC,aACZ4B,KAAKC,MAAY,IAANH,GAAc,OAEtC5B,eAAA,KAAGC,UAAU,YAAWC,SAAA,CAAC,cACX4B,KAAKC,MAAY,IAANJ,GAAc,UAIzCzD,cAACiD,EAAM,UAMnB,ECnCe,MAA0B,kCCmH1Ba,MA7Gf,WACE,IAAAlD,EAAsBC,qBAAUC,EAAAC,YAAAH,EAAA,GAAzB8C,EAAG5C,EAAA,GAAEiD,EAAMjD,EAAA,GAClBkD,EAAsBnD,qBAAUoD,EAAAlD,YAAAiD,EAAA,GAAzBP,EAAGQ,EAAA,GAAEC,EAAMD,EAAA,GAClBE,EAAwBtD,mBAAS,IAAGuD,EAAArD,YAAAoD,EAAA,GAA7B7C,EAAI8C,EAAA,GAAEC,EAAOD,EAAA,GACpBE,EAAwCzD,oBAAS,GAAK0D,EAAAxD,YAAAuD,EAAA,GAA/CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAAwD7D,oBAAS,GAAK8D,EAAA5D,YAAA2D,EAAA,GAA/DnD,EAAoBoD,EAAA,GAAEC,EAAuBD,EAAA,GAEpDzD,qBAAU,WACR2D,UAAUC,YAAYC,oBAAmB,SAAUC,GACjDjB,EAAOiB,EAASC,OAAOC,UACvBhB,EAAOc,EAASC,OAAOE,UACzB,IACAV,GAAgB,EAClB,GAAG,IAEHvD,qBAAU,YACa,IAAjBsD,GACFY,EAAW1B,EAAKD,EAGpB,GAAG,CAACA,IAEJ,IAAM4B,EAAe,SAACC,GAGpB,OAFoB,IAAI3D,MAAO4D,UACbC,SAASF,EAAW,IACL,IACnC,EAEMF,EAAU,eAAAK,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,EAAOnC,EAAKD,GAAG,IAAAqC,EAAAC,EAAAT,EAAAU,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,cAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACuB,KAAjDT,EAAaU,aAAaC,QAAQ,gBAEzB,CAADJ,EAAAE,KAAA,QACW,GADXR,EAC8BW,KAAKC,MAAMb,GAA7CR,EAASS,EAATT,UAAiBU,EAAYD,EAAlBzE,MACf+D,EAAaC,GAAW,CAADe,EAAAE,KAAA,QAGK,OAF9BlC,EAAQ2B,GACRpB,GAAwB,GACxBgC,QAAQC,IAAI,kBAAkBR,EAAAS,OAAA,wBAAAT,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAMTQ,MAAM,GAAD7G,OACvB8G,0CAA6B,iBAAA9G,OAAgBwD,EAAG,SAAAxD,OAAQuD,EAAG,gDAAAvD,OAA+C8G,qCAC7G,KAAD,GAFa,OAARf,EAAQI,EAAAY,KAAAZ,EAAAE,KAAA,GAGON,EAASiB,OAAO,KAAD,GAA9BhB,EAAMG,EAAAY,KACZ5C,EAAQ6B,GAGFC,EAAY,CAChBb,WAAW,IAAI3D,MAAO4D,UACtBjE,KAAM4E,GAERM,aAAaW,QAAQ,cAAeT,KAAKU,UAAUjB,IAEnDvB,GAAwB,GAAOyB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,SAE/BO,QAAQU,MAAM,+BAA8BjB,EAAAgB,IAC5CzC,GAAwB,GAAO,yBAAAyB,EAAAkB,OAAA,GAAA1B,EAAA,mBAElC,gBAhCe2B,EAAAC,GAAA,OAAAhC,EAAAiC,MAAA,KAAAjH,UAAA,KAqChB,OADAmG,QAAQC,IAAI,+CAAsCvF,GAEhDQ,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC/BF,eAAA,OAAKC,UAAU,6BAA4BC,SAAA,CACzChC,cAAA,OACEC,IAAK0H,EACLC,MAAM,KACNC,OAAO,KACPxH,IAAI,GACJ0B,UAAU,cAEZ/B,cAAA,QAAM+B,UAAU,iBAAgBC,SAAC,oBAEnCF,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC5BhC,cAACwD,EAAY,CACXE,IAAKA,EACLD,IAAKA,EACLnC,KAAMA,EACNkD,aAAcA,EACdsD,eArBe,WAAH,OAAS1C,EAAW1B,EAAKD,EAAK,IAuB5CzD,cAAC+H,EAAW,CACVzG,KAAMA,EAAK0G,QACXzG,qBAAsBA,EACtBC,WAAW,IAEZF,GACCA,EAAK2G,OACL3G,EAAK2G,MAAMvH,OAAS,GACpBY,EAAK2G,MAAM/F,KAAI,SAACgG,EAAKzG,GACnB,OACEzB,cAAC+H,EAAW,CACVzG,KAAM4G,EACN3G,qBAAsBA,EACtBC,WAAW,EAEXC,MAAOA,GADFA,EAIX,SAIV,ECrGe0G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAA7C,GAAkD,IAA/C8C,EAAM9C,EAAN8C,OAAQC,EAAM/C,EAAN+C,OAAQC,EAAMhD,EAANgD,OAAQC,EAAMjD,EAANiD,OAAQC,EAAOlD,EAAPkD,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,E,MCHAQ,IAASC,OACP7I,cAAC8I,IAAMC,WAAU,CAAA/G,SACfhC,cAAC8D,EAAG,MAENkF,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.daa88a5b.chunk.js","sourcesContent":["import \"./styles.css\";\n\nconst WeatherEmoji = (props) => (\n  <img\n    src={`http://openweathermap.org/img/w/${props.weatherDescription.icon}.png`}\n    alt=\"weather icon\"\n  />\n);\n\nexport default WeatherEmoji;\n","import { useState, useEffect } from \"react\";\n\nconst useWeekday = (initialDate, offset = 0) => {\n  const [weekday, setWeekday] = useState(\"\");\n\n  useEffect(() => {\n    const daysOfWeek = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    const dayIndex = (initialDate.getDay() + offset) % 7;\n\n    setWeekday(daysOfWeek[dayIndex]);\n  }, [initialDate, offset]);\n\n  return weekday;\n};\n\nexport default useWeekday;\n","import \"./styles.css\";\nimport WeatherEmoji from \"./WeatherEmoji\";\nimport useWeekday from \"../hooks/useWeekday\";\n\nconst Weathercard = (props) => {\n  const { data, isLoadingWeatherdata, isCurrent, index } = props;\n\n  const today = new Date();\n  const offset = index;\n  const todayWeekday = useWeekday(today, offset);\n\n  const FeelsLikeSection = () => {\n    if (isCurrent) {\n      return (\n        <p className=\"card-text\">ðŸ˜Œ Feels like: {data.feels_like + \" Â°C\"}</p>\n      );\n    } else if (typeof data.feels_like === \"object\") {\n      const orderedKeys = [\"morn\", \"day\", \"eve\", \"night\"];\n      return (\n        <div>\n          <h5>ðŸ˜Œ Feels like</h5>\n          {orderedKeys.map((time) => (\n            <p key={time} className=\"card-text\">\n              {`${time.charAt(0).toUpperCase() + time.slice(1)}, Feels like:\n              ${data.feels_like[time]} Â°C`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return <></>;\n  };\n\n  const HeaderSection = () => {\n    if (isCurrent) {\n      return <span>Right now</span>;\n    }\n    if (index) {\n      return <span>{todayWeekday}</span>;\n    }\n    return <span>Today</span>;\n  };\n\n  if (data && !isLoadingWeatherdata) {\n    return (\n      <div className=\"card\" style={{ lineHeight: \"75%\" }}>\n        <div className=\"card-body pt-1\">\n          <h5 className=\"card-title d-flex align-items-center justify-content-between mb-0\">\n            <HeaderSection />\n            <WeatherEmoji weatherDescription={data.weather[0]} />\n          </h5>\n          <FeelsLikeSection />\n          <p className=\"card-text\" style={{ paddingTop: \"20px\" }}>\n            ðŸŒŠ Humidity: {data.humidity + \" %\"}\n          </p>\n          <p className=\"card-text\">\n            ðŸŒ… Sunrise: {new Date(data.sunrise * 1000).toLocaleTimeString()}\n          </p>\n          <p className=\"card-text\">\n            ðŸŒ‡ Sunset: {new Date(data.sunset * 1000).toLocaleTimeString()}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default Weathercard;\n","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loaderContainer\">\n      <span>Getting your data</span>\n      <div className=\"spinner\">\n        <div className=\"bounce1\"></div>\n        <div className=\"bounce2\"></div>\n        <div className=\"bounce3\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import { useState, useEffect } from \"react\";\n\nconst useTime = () => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000); // Update every second\n\n    return () => clearInterval(interval); // Cleanup the interval on unmount\n  }, []);\n\n  return currentTime.toLocaleTimeString();\n};\n\nexport default useTime;\n","import \"./styles.css\";\nimport Loader from \"./Loader\";\nimport useWeekday from \"../hooks/useWeekday\";\nimport useTime from \"../hooks/useTime\";\n\nconst PositionCard = (props) => {\n  const { lon, lat, data } = props;\n\n  const today = new Date();\n  const todayWeekday = useWeekday(today);\n  const currentTime = useTime();\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{data.timezone}</h5>\n          {lon && lat ? (\n            <div>\n              <p className=\"card-text\">Time: {currentTime}</p>\n              <p className=\"card-text\">Weekday: {todayWeekday}</p>\n              <p className=\"card-text\">\n                Latitude: {Math.round(lat * 1000) / 1000}\n              </p>\n              <p className=\"card-text\">\n                Longitude: {Math.round(lon * 1000) / 1000}\n              </p>\n            </div>\n          ) : (\n            <Loader />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PositionCard;\n","export default __webpack_public_path__ + \"static/media/panda.d59f7d49.png\";","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport WeatherCard from \"./components/Weathercard\";\nimport PositionCard from \"./components/Positioncard\";\nimport PandaLogo from \"./images/panda.png\";\n\nfunction App() {\n  const [lat, setLat] = useState();\n  const [lon, setLon] = useState();\n  const [data, setData] = useState([]);\n  const [isLoadingGPS, setisLoadingGPS] = useState(true);\n  const [isLoadingWeatherdata, setIsLoadingWeatherdata] = useState(true);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLon(position.coords.longitude);\n    });\n    setisLoadingGPS(false);\n  }, []);\n\n  useEffect(() => {\n    if (isLoadingGPS === false) {\n      getWeather(lat, lon);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lon]);\n\n  const isCacheValid = (timestamp) => {\n    const currentTime = new Date().getTime();\n    const cacheTime = parseInt(timestamp, 10);\n    return currentTime - cacheTime < 3600000; // 1 hour in milliseconds\n  };\n\n  const getWeather = async (lat, lon) => {\n    const cachedData = localStorage.getItem(\"weatherData\");\n\n    if (cachedData) {\n      const { timestamp, data: cachedResult } = JSON.parse(cachedData);\n      if (isCacheValid(timestamp)) {\n        setData(cachedResult);\n        setIsLoadingWeatherdata(false);\n        console.log(\"Cache is valid\");\n        return;\n      }\n    }\n\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely,hourly&appid=${process.env.REACT_APP_API_KEY}`\n      );\n      const result = await response.json();\n      setData(result);\n\n      // Update the cache with the new data and timestamp\n      const cacheData = {\n        timestamp: new Date().getTime(),\n        data: result,\n      };\n      localStorage.setItem(\"weatherData\", JSON.stringify(cacheData));\n\n      setIsLoadingWeatherdata(false);\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      setIsLoadingWeatherdata(false);\n    }\n  };\n\n  const onClickHandler = () => getWeather(lat, lon);\n\n  console.log(\"ðŸš€ ~ file: App.js:11 ~ App ~ data:\", data);\n  return (\n    <div className=\"App bg-secondary\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <img\n          src={PandaLogo}\n          width=\"30\"\n          height=\"30\"\n          alt=\"\"\n          className=\"pandaLogo\"\n        />\n        <span className=\"m-3 text-light\">WeatherPanda</span>\n      </nav>\n      <div className=\"cardContainer\">\n        <PositionCard\n          lat={lat}\n          lon={lon}\n          data={data}\n          isLoadingGPS={isLoadingGPS}\n          onClickHandler={onClickHandler}\n        />\n        <WeatherCard\n          data={data.current}\n          isLoadingWeatherdata={isLoadingWeatherdata}\n          isCurrent={true}\n        />\n        {data &&\n          data.daily &&\n          data.daily.length > 0 &&\n          data.daily.map((day, index) => {\n            return (\n              <WeatherCard\n                data={day}\n                isLoadingWeatherdata={isLoadingWeatherdata}\n                isCurrent={false}\n                key={index}\n                index={index}\n              />\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}