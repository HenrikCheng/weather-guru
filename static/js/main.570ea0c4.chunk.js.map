{"version":3,"sources":["components/WeatherEmoji.js","components/Weathercard.js","components/Loader.js","components/Positioncard.js","images/panda.png","App.js","reportWebVitals.js","index.js"],"names":["WeatherEmoji","props","_jsx","src","concat","weatherDescription","icon","alt","Weathercard","data","isLoadingWeatherdata","className","children","_jsxs","current","weather","_Fragment","temp","description","feels_like","humidity","Date","sunrise","toLocaleTimeString","sunset","Loader","PositionCard","lon","lat","onClickHandler","timezone","Math","round","App","_useState","useState","_useState2","_slicedToArray","setLat","_useState3","_useState4","setLon","_useState5","_useState6","setData","_useState7","_useState8","isLoadingGPS","setisLoadingGPS","_useState9","_useState10","setIsLoadingWeatherdata","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getWeather","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","fetch","process","then","res","json","result","console","log","stop","_x","_x2","apply","arguments","href","PandaLogo","width","height","WeatherCard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.570ea0c4.chunk.js","sourcesContent":["import \"./styles.css\";\n\nconst WeatherEmoji = (props) => (\n  <img\n    src={`http://openweathermap.org/img/w/${props.weatherDescription.icon}.png`}\n    alt=\"weather icon\"\n  />\n);\n\nexport default WeatherEmoji;\n","import \"./styles.css\";\nimport WeatherEmoji from \"./WeatherEmoji\";\n\nconst Weathercard = (props) => {\n  const { data, isLoadingWeatherdata } = props;\n  return (\n    <div className=\"card\">\n      <div className=\"card-body pt-1\">\n        <h5 className=\"card-title d-flex align-items-center justify-content-between mb-0\">\n          Right now\n          {!isLoadingWeatherdata && (\n            <WeatherEmoji weatherDescription={data.current.weather[0]} />\n          )}\n        </h5>\n        <p className=\"card-title\">\n          {!isLoadingWeatherdata && (\n            <>\n              ðŸŒ¡{\" \"}\n              {data.current.temp +\n                \" Â°C. \" +\n                data.current.weather[0].description +\n                \".\"}\n            </>\n          )}\n        </p>\n        <p className=\"card-text\">\n          ðŸ˜Œ Feels like:{\" \"}\n          {!isLoadingWeatherdata && data.current.feels_like + \" Â°C\"}\n        </p>\n        <p className=\"card-text\">\n          ðŸŒŠ Humidity: {!isLoadingWeatherdata && data.current.humidity + \" %\"}\n        </p>\n        <p className=\"card-text\">\n          ðŸŒ… Sunrise:{\" \"}\n          {!isLoadingWeatherdata &&\n            new Date(data.current.sunrise * 1000).toLocaleTimeString()}\n        </p>\n        <p className=\"card-text\">\n          ðŸŒ‡ Sunset:{\" \"}\n          {!isLoadingWeatherdata &&\n            new Date(data.current.sunset * 1000).toLocaleTimeString()}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Weathercard;\n","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loaderContainer\">\n      <span>Getting your data</span>\n      <div className=\"spinner\">\n        <div className=\"bounce1\"></div>\n        <div className=\"bounce2\"></div>\n        <div className=\"bounce3\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import \"./styles.css\";\nimport Loader from \"./Loader\";\n\nconst PositionCard = (props) => {\n  const { lon, lat, data, onClickHandler } = props;\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{data.timezone}</h5>\n          {lon && lat ? (\n            <>\n              <div>Latitude: {Math.round(lat * 1000) / 1000}</div>\n              <div>Longitude: {Math.round(lon * 1000) / 1000}</div>\n            </>\n          ) : (\n            <Loader />\n            // <></>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PositionCard;\n","export default __webpack_public_path__ + \"static/media/panda.d59f7d49.png\";","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport WeatherCard from \"./components/Weathercard\";\nimport PositionCard from \"./components/Positioncard\";\nimport PandaLogo from \"./images/panda.png\";\n\nfunction App() {\n  const [lat, setLat] = useState();\n  const [lon, setLon] = useState();\n  const [data, setData] = useState([]);\n  const [isLoadingGPS, setisLoadingGPS] = useState(true);\n  const [isLoadingWeatherdata, setIsLoadingWeatherdata] = useState(true);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLon(position.coords.longitude);\n    });\n    setisLoadingGPS(false);\n  }, []);\n\n  useEffect(() => {\n    if (isLoadingGPS === false) {\n      getWeather(lat, lon);\n    }\n  }, [lon]);\n\n  const getWeather = async (lat, lon) => {\n    await fetch(\n      `${process.env.REACT_APP_API_URL}/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely,hourly&appid=${process.env.REACT_APP_API_KEY}`\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        setData(result);\n        console.log(result);\n      });\n    setIsLoadingWeatherdata(false);\n  };\n\n  const onClickHandler = () => getWeather(lat, lon);\n\n  return (\n    <div className=\"App bg-secondary\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          <img\n            src={PandaLogo}\n            width=\"30\"\n            height=\"30\"\n            alt=\"\"\n            className=\"pandaLogo\"\n          />\n          <span className=\"m-3\">WeatherPanda</span>\n        </a>\n      </nav>\n      <div className=\"cardContainer\">\n        <PositionCard\n          lat={lat}\n          lon={lon}\n          data={data}\n          isLoadingGPS={isLoadingGPS}\n          onClickHandler={onClickHandler}\n        />\n        <WeatherCard data={data} isLoadingWeatherdata={isLoadingWeatherdata} />\n      </div>\n      <div className=\"cardContainer\">\n        {/* {!isLoadingWeatherdata &&\n          data.daily.forEach((day) => {\n            console.log(day);\n            <div>Hello World</div>;\n          })} */}\n        {/* {!isLoadingWeatherdata && data.daily.map((day) => <p>{day.temp}</p>)} */}\n        {/* {!isLoadingWeatherdata &&\n          data.daily.map((day, index) => <div>{day.temp}</div>)} */}\n        {/* {data.daily.map((day) => (\n          <div>{day.temp}</div>\n        ))} */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}