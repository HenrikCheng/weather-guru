{"version":3,"sources":["components/loader.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","App","useState","lat","setLat","long","setLong","data","setData","isLoadingGPS","setisLoadingGPS","isLoadingWeatherdata","setIsLoadingWeatherdata","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getWeather","a","fetch","process","then","res","json","result","console","log","Math","round","onClick","timezone","current","temp","weather","description","Date","sunrise","toLocaleTimeString","sunset","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAeeA,EAbA,WACb,OACE,sBAAKC,UAAU,kBAAf,UACE,qDACA,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,YACf,qBAAKA,UAAU,YACf,qBAAKA,UAAU,mBC4DRC,MAjEf,WAAgB,IAAD,EACSC,qBADT,mBACNC,EADM,KACDC,EADC,OAEWF,qBAFX,mBAENG,EAFM,KAEAC,EAFA,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAI2BN,oBAAS,GAJpC,mBAINO,EAJM,KAIQC,EAJR,OAK2CR,oBAAS,GALpD,mBAKNS,EALM,KAKgBC,EALhB,KAObC,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAAUC,GACjDb,EAAOa,EAASC,OAAOC,UACvBb,EAAQW,EAASC,OAAOE,cAE1BV,GAAgB,KACf,IAEHG,qBAAU,YACa,IAAjBJ,GACFY,EAAWlB,EAAKE,KAEjB,CAACA,IAEJ,IAAMgB,EAAU,uCAAG,WAAOlB,EAAKE,GAAZ,SAAAiB,EAAA,sEACXC,MAAM,GAAD,OACNC,0CADM,wBACuCrB,EADvC,gBACkDE,EADlD,uDACqGmB,qCAE7GC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLpB,EAAQoB,GACRC,QAAQC,IAAIF,MAPC,OASjBhB,GAAwB,GATP,2CAAH,wDAchB,OACE,sBAAKZ,UAAU,MAAf,UACE,mDACCK,GAAQF,EACP,qCACE,6CAAgB4B,KAAKC,MAAY,IAAN7B,GAAc,OACzC,8CAAiB4B,KAAKC,MAAa,IAAP3B,GAAe,UAG7C,cAAC,EAAD,IAEF,wBAAQ4B,QAbW,kBAAMZ,EAAWlB,EAAKE,IAazC,qBACA,6CAAgBE,EAAK2B,SAArB,OACA,yDACyBvB,GAAwBJ,EAAK4B,QAAQC,KAAO,aAAe7B,EAAK4B,QAAQE,QAAQ,GAAGC,eAE5G,2CACW,KACP3B,GACA,IAAI4B,KAA4B,IAAvBhC,EAAK4B,QAAQK,SAAgBC,qBAAsB,OAEhE,0CACU,KACN9B,GACA,IAAI4B,KAA2B,IAAtBhC,EAAK4B,QAAQO,QAAeD,qBAAsB,WCnDtDE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b98d1bd8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loaderContainer\">\n      <span>Getting your data</span>\n      <div className=\"spinner\">\n        <div className=\"bounce1\"></div>\n        <div className=\"bounce2\"></div>\n        <div className=\"bounce3\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Loader from \"./components/loader\";\n\nfunction App() {\n  const [lat, setLat] = useState();\n  const [long, setLong] = useState();\n  const [data, setData] = useState([]);\n  const [isLoadingGPS, setisLoadingGPS] = useState(true);\n  const [isLoadingWeatherdata, setIsLoadingWeatherdata] = useState(true);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n    setisLoadingGPS(false);\n  }, []);\n\n  useEffect(() => {\n    if (isLoadingGPS === false) {\n      getWeather(lat, long);\n    }\n  }, [long]); //lat should be here also but long is checked last\n\n  const getWeather = async (lat, long) => {\n    await fetch(\n      `${process.env.REACT_APP_API_URL}/onecall?lat=${lat}&lon=${long}&units=metric&exclude=minutely,hourly&appid=${process.env.REACT_APP_API_KEY}`\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        setData(result);\n        console.log(result);\n      });\n    setIsLoadingWeatherdata(false);\n  };\n\n  const onClickHandler = () => getWeather(lat, long);\n\n  return (\n    <div className=\"App\">\n      <h1>Your position is:</h1>\n      {long && lat ? (\n        <>\n          <div>Latitude: {Math.round(lat * 1000) / 1000}</div>\n          <div>Longitude: {Math.round(long * 1000) / 1000}</div>\n        </>\n      ) : (\n        <Loader />\n      )}\n      <button onClick={onClickHandler}>Refresh</button>\n      <div>Location: {data.timezone} </div>\n      <div>\n        Current temperature: {!isLoadingWeatherdata && data.current.temp + \" Celcius. \" + data.current.weather[0].description}\n      </div>\n      <div>\n        Sunrise:{\" \"}\n        {!isLoadingWeatherdata &&\n          new Date(data.current.sunrise * 1000).toLocaleTimeString()}{\" \"}\n      </div>\n      <div>\n        Sunset:{\" \"}\n        {!isLoadingWeatherdata &&\n          new Date(data.current.sunset * 1000).toLocaleTimeString()}{\" \"}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}